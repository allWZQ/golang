package aliyuncvc

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// QueryUserBuyAttribute invokes the aliyuncvc.QueryUserBuyAttribute API synchronously
// api document: https://help.aliyun.com/api/aliyuncvc/queryuserbuyattribute.html
func (client *Client) QueryUserBuyAttribute(request *QueryUserBuyAttributeRequest) (response *QueryUserBuyAttributeResponse, err error) {
	response = CreateQueryUserBuyAttributeResponse()
	err = client.DoAction(request, response)
	return
}

// QueryUserBuyAttributeWithChan invokes the aliyuncvc.QueryUserBuyAttribute API asynchronously
// api document: https://help.aliyun.com/api/aliyuncvc/queryuserbuyattribute.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) QueryUserBuyAttributeWithChan(request *QueryUserBuyAttributeRequest) (<-chan *QueryUserBuyAttributeResponse, <-chan error) {
	responseChan := make(chan *QueryUserBuyAttributeResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.QueryUserBuyAttribute(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// QueryUserBuyAttributeWithCallback invokes the aliyuncvc.QueryUserBuyAttribute API asynchronously
// api document: https://help.aliyun.com/api/aliyuncvc/queryuserbuyattribute.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) QueryUserBuyAttributeWithCallback(request *QueryUserBuyAttributeRequest, callback func(response *QueryUserBuyAttributeResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *QueryUserBuyAttributeResponse
		var err error
		defer close(result)
		response, err = client.QueryUserBuyAttribute(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// QueryUserBuyAttributeRequest is the request struct for api QueryUserBuyAttribute
type QueryUserBuyAttributeRequest struct {
	*requests.RpcRequest
}

// QueryUserBuyAttributeResponse is the response struct for api QueryUserBuyAttribute
type QueryUserBuyAttributeResponse struct {
	*responses.BaseResponse
	ErrorCode        int    `json:"ErrorCode" xml:"ErrorCode"`
	Message          string `json:"Message" xml:"Message"`
	Success          bool   `json:"Success" xml:"Success"`
	UserBuyAttribute bool   `json:"UserBuyAttribute" xml:"UserBuyAttribute"`
	RequestId        string `json:"RequestId" xml:"RequestId"`
}

// CreateQueryUserBuyAttributeRequest creates a request to invoke QueryUserBuyAttribute API
func CreateQueryUserBuyAttributeRequest() (request *QueryUserBuyAttributeRequest) {
	request = &QueryUserBuyAttributeRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("aliyuncvc", "2019-09-19", "QueryUserBuyAttribute", "aliyuncvc", "openAPI")
	request.Method = requests.POST
	return
}

// CreateQueryUserBuyAttributeResponse creates a response to parse from QueryUserBuyAttribute response
func CreateQueryUserBuyAttributeResponse() (response *QueryUserBuyAttributeResponse) {
	response = &QueryUserBuyAttributeResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
